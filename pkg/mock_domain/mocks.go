// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/domain/interfaces.go

// Package mock_domain is a generated GoMock package.
package mock_domain

import (
	gomock "github.com/golang/mock/gomock"
	domain "nes-go/pkg/domain"
	reflect "reflect"
)

// MockCPU is a mock of CPU interface
type MockCPU struct {
	ctrl     *gomock.Controller
	recorder *MockCPUMockRecorder
}

// MockCPUMockRecorder is the mock recorder for MockCPU
type MockCPUMockRecorder struct {
	mock *MockCPU
}

// NewMockCPU creates a new mock instance
func NewMockCPU(ctrl *gomock.Controller) *MockCPU {
	mock := &MockCPU{ctrl: ctrl}
	mock.recorder = &MockCPUMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCPU) EXPECT() *MockCPUMockRecorder {
	return m.recorder
}

// SetBus mocks base method
func (m *MockCPU) SetBus(arg0 domain.Bus) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetBus", arg0)
}

// SetBus indicates an expected call of SetBus
func (mr *MockCPUMockRecorder) SetBus(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBus", reflect.TypeOf((*MockCPU)(nil).SetBus), arg0)
}

// Run mocks base method
func (m *MockCPU) Run() (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Run indicates an expected call of Run
func (mr *MockCPUMockRecorder) Run() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockCPU)(nil).Run))
}

// String mocks base method
func (m *MockCPU) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String
func (mr *MockCPUMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockCPU)(nil).String))
}

// ReceiveNMI mocks base method
func (m *MockCPU) ReceiveNMI(active bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ReceiveNMI", active)
}

// ReceiveNMI indicates an expected call of ReceiveNMI
func (mr *MockCPUMockRecorder) ReceiveNMI(active interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReceiveNMI", reflect.TypeOf((*MockCPU)(nil).ReceiveNMI), active)
}

// MockPPU is a mock of PPU interface
type MockPPU struct {
	ctrl     *gomock.Controller
	recorder *MockPPUMockRecorder
}

// MockPPUMockRecorder is the mock recorder for MockPPU
type MockPPUMockRecorder struct {
	mock *MockPPU
}

// NewMockPPU creates a new mock instance
func NewMockPPU(ctrl *gomock.Controller) *MockPPU {
	mock := &MockPPU{ctrl: ctrl}
	mock.recorder = &MockPPUMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPPU) EXPECT() *MockPPUMockRecorder {
	return m.recorder
}

// SetBus mocks base method
func (m *MockPPU) SetBus(arg0 domain.Bus) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetBus", arg0)
}

// SetBus indicates an expected call of SetBus
func (mr *MockPPUMockRecorder) SetBus(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBus", reflect.TypeOf((*MockPPU)(nil).SetBus), arg0)
}

// ReadRegisters mocks base method
func (m *MockPPU) ReadRegisters(arg0 domain.Address) (byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadRegisters", arg0)
	ret0, _ := ret[0].(byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadRegisters indicates an expected call of ReadRegisters
func (mr *MockPPUMockRecorder) ReadRegisters(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadRegisters", reflect.TypeOf((*MockPPU)(nil).ReadRegisters), arg0)
}

// WriteRegisters mocks base method
func (m *MockPPU) WriteRegisters(arg0 domain.Address, arg1 byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteRegisters", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteRegisters indicates an expected call of WriteRegisters
func (mr *MockPPUMockRecorder) WriteRegisters(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteRegisters", reflect.TypeOf((*MockPPU)(nil).WriteRegisters), arg0, arg1)
}

// Run mocks base method
func (m *MockPPU) Run(arg0 int) (*domain.Screen, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", arg0)
	ret0, _ := ret[0].(*domain.Screen)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Run indicates an expected call of Run
func (mr *MockPPUMockRecorder) Run(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockPPU)(nil).Run), arg0)
}

// String mocks base method
func (m *MockPPU) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String
func (mr *MockPPUMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockPPU)(nil).String))
}

// MockBus is a mock of Bus interface
type MockBus struct {
	ctrl     *gomock.Controller
	recorder *MockBusMockRecorder
}

// MockBusMockRecorder is the mock recorder for MockBus
type MockBusMockRecorder struct {
	mock *MockBus
}

// NewMockBus creates a new mock instance
func NewMockBus(ctrl *gomock.Controller) *MockBus {
	mock := &MockBus{ctrl: ctrl}
	mock.recorder = &MockBusMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBus) EXPECT() *MockBusMockRecorder {
	return m.recorder
}

// Setup mocks base method
func (m *MockBus) Setup(arg0 *domain.ROM, arg1 domain.PPU, arg2 domain.CPU, arg3 *domain.VRAM, arg4, arg5 domain.Pad) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Setup", arg0, arg1, arg2, arg3, arg4, arg5)
}

// Setup indicates an expected call of Setup
func (mr *MockBusMockRecorder) Setup(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Setup", reflect.TypeOf((*MockBus)(nil).Setup), arg0, arg1, arg2, arg3, arg4, arg5)
}

// ReadByCPU mocks base method
func (m *MockBus) ReadByCPU(arg0 domain.Address) (byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadByCPU", arg0)
	ret0, _ := ret[0].(byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadByCPU indicates an expected call of ReadByCPU
func (mr *MockBusMockRecorder) ReadByCPU(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadByCPU", reflect.TypeOf((*MockBus)(nil).ReadByCPU), arg0)
}

// WriteByCPU mocks base method
func (m *MockBus) WriteByCPU(arg0 domain.Address, arg1 byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteByCPU", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteByCPU indicates an expected call of WriteByCPU
func (mr *MockBusMockRecorder) WriteByCPU(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteByCPU", reflect.TypeOf((*MockBus)(nil).WriteByCPU), arg0, arg1)
}

// ReadByPPU mocks base method
func (m *MockBus) ReadByPPU(arg0 domain.Address) (byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadByPPU", arg0)
	ret0, _ := ret[0].(byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadByPPU indicates an expected call of ReadByPPU
func (mr *MockBusMockRecorder) ReadByPPU(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadByPPU", reflect.TypeOf((*MockBus)(nil).ReadByPPU), arg0)
}

// WriteByPPU mocks base method
func (m *MockBus) WriteByPPU(arg0 domain.Address, arg1 byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteByPPU", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteByPPU indicates an expected call of WriteByPPU
func (mr *MockBusMockRecorder) WriteByPPU(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteByPPU", reflect.TypeOf((*MockBus)(nil).WriteByPPU), arg0, arg1)
}

// GetTileNo mocks base method
func (m *MockBus) GetTileNo(arg0 uint8, arg1 domain.NameTablePoint) (uint8, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTileNo", arg0, arg1)
	ret0, _ := ret[0].(uint8)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTileNo indicates an expected call of GetTileNo
func (mr *MockBusMockRecorder) GetTileNo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTileNo", reflect.TypeOf((*MockBus)(nil).GetTileNo), arg0, arg1)
}

// GetTilePattern mocks base method
func (m *MockBus) GetTilePattern(arg0, arg1 uint8) *domain.TilePattern {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTilePattern", arg0, arg1)
	ret0, _ := ret[0].(*domain.TilePattern)
	return ret0
}

// GetTilePattern indicates an expected call of GetTilePattern
func (mr *MockBusMockRecorder) GetTilePattern(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTilePattern", reflect.TypeOf((*MockBus)(nil).GetTilePattern), arg0, arg1)
}

// GetPaletteNo mocks base method
func (m *MockBus) GetPaletteNo(arg0 domain.NameTablePoint, arg1 byte) (uint8, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPaletteNo", arg0, arg1)
	ret0, _ := ret[0].(uint8)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPaletteNo indicates an expected call of GetPaletteNo
func (mr *MockBusMockRecorder) GetPaletteNo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPaletteNo", reflect.TypeOf((*MockBus)(nil).GetPaletteNo), arg0, arg1)
}

// GetPalette mocks base method
func (m *MockBus) GetPalette(arg0 uint8) *domain.Palette {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPalette", arg0)
	ret0, _ := ret[0].(*domain.Palette)
	return ret0
}

// GetPalette indicates an expected call of GetPalette
func (mr *MockBusMockRecorder) GetPalette(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPalette", reflect.TypeOf((*MockBus)(nil).GetPalette), arg0)
}

// GetAttribute mocks base method
func (m *MockBus) GetAttribute(arg0 uint8, arg1 domain.NameTablePoint) (byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAttribute", arg0, arg1)
	ret0, _ := ret[0].(byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAttribute indicates an expected call of GetAttribute
func (mr *MockBusMockRecorder) GetAttribute(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAttribute", reflect.TypeOf((*MockBus)(nil).GetAttribute), arg0, arg1)
}

// SendNMI mocks base method
func (m *MockBus) SendNMI(active bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SendNMI", active)
}

// SendNMI indicates an expected call of SendNMI
func (mr *MockBusMockRecorder) SendNMI(active interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendNMI", reflect.TypeOf((*MockBus)(nil).SendNMI), active)
}

// MockRenderer is a mock of Renderer interface
type MockRenderer struct {
	ctrl     *gomock.Controller
	recorder *MockRendererMockRecorder
}

// MockRendererMockRecorder is the mock recorder for MockRenderer
type MockRendererMockRecorder struct {
	mock *MockRenderer
}

// NewMockRenderer creates a new mock instance
func NewMockRenderer(ctrl *gomock.Controller) *MockRenderer {
	mock := &MockRenderer{ctrl: ctrl}
	mock.recorder = &MockRendererMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRenderer) EXPECT() *MockRendererMockRecorder {
	return m.recorder
}

// Run mocks base method
func (m *MockRenderer) Run() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run")
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run
func (mr *MockRendererMockRecorder) Run() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockRenderer)(nil).Run))
}

// Render mocks base method
func (m *MockRenderer) Render(arg0 *domain.Screen) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Render", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Render indicates an expected call of Render
func (mr *MockRendererMockRecorder) Render(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Render", reflect.TypeOf((*MockRenderer)(nil).Render), arg0)
}
